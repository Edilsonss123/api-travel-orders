<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="ApiResponse.php" path="/Helpers">
    <totals>
      <lines total="40" comments="12" code="28" executable="11" executed="11" percent="100.00"/>
      <methods count="2" tested="2" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Helpers\ApiResponse" start="7" executable="11" executed="11" crap="4">
      <namespace name="App\Helpers"/>
      <method name="response" signature="response(array $data, string $message, int $statusCode): Illuminate\Http\JsonResponse" start="15" end="23" crap="2" executable="6" executed="6" coverage="100"/>
      <method name="error" signature="error(string $message, array $errors, int $statusCode): Illuminate\Http\JsonResponse" start="31" end="38" crap="2" executable="5" executed="5" coverage="100"/>
    </class>
    <coverage>
      <line nr="17">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithValidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWhenNotAuthenticated"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithUnauthenticated"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testTotalTimeApiLoadGenerator"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="18">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithValidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWhenNotAuthenticated"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithUnauthenticated"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testTotalTimeApiLoadGenerator"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="19">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithValidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWhenNotAuthenticated"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithUnauthenticated"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testTotalTimeApiLoadGenerator"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="20">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithValidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWhenNotAuthenticated"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithUnauthenticated"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testTotalTimeApiLoadGenerator"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="21">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithValidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWhenNotAuthenticated"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithUnauthenticated"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testTotalTimeApiLoadGenerator"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="33">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithInvalidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithoutCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;data empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name short&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name long&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;password invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithThrowable"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiFail"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorFail"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test Generic Exception&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithPastReturnDate"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithTravelException"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithGenericException"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test Generic Exception&quot;"/>
      </line>
      <line nr="34">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithInvalidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithoutCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;data empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name short&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name long&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;password invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithThrowable"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiFail"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorFail"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test Generic Exception&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithPastReturnDate"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithTravelException"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithGenericException"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test Generic Exception&quot;"/>
      </line>
      <line nr="36">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithInvalidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithoutCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;data empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name short&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name long&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;password invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithThrowable"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiFail"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorFail"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test Generic Exception&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithPastReturnDate"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithTravelException"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithGenericException"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test Generic Exception&quot;"/>
      </line>
      <line nr="22">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithValidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWhenNotAuthenticated"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshSuccess"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithUnauthenticated"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorSuccess"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testTotalTimeApiLoadGenerator"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="35">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithInvalidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithoutCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;data empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name short&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name long&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;password invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithThrowable"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiFail"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorFail"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test Generic Exception&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithPastReturnDate"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithTravelException"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithGenericException"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test Generic Exception&quot;"/>
      </line>
      <line nr="37">
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithInvalidCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCanAuthenticateWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testUserCannotAuthenticateWithoutCredentials"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testLogoutFailsWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserAuthenticateTest::testRefreshFailureWithThrowable"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;data empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name short&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;name long&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email empty&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;email invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateUserFail with data set &quot;password invalid&quot;"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithTravelException"/>
        <covered by="Tests\Feature\Auth\UserCreateTest::testCreateFailsWithThrowable"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testHealthApiFail"/>
        <covered by="Tests\Feature\Health\HealthCheckTest::testApiLoadGeneratorFail"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithException with data set &quot;test Generic Exception&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithPastReturnDate"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdWithException with data set &quot;test Throwable&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithTravelException"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithGenericException"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test TravelException&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithException with data set &quot;test Generic Exception&quot;"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Helpers</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Http\JsonResponse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ApiResponse</token>
      </line>
      <line no="8">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="9">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="10">
        <token name="T_DOC_COMMENT">     * @param  array  $data</token>
      </line>
      <line no="11">
        <token name="T_DOC_COMMENT">     * @param  string  $message</token>
      </line>
      <line no="12">
        <token name="T_DOC_COMMENT">     * @param  int  $statusCode</token>
      </line>
      <line no="13">
        <token name="T_DOC_COMMENT">     * @return \Illuminate\Http\JsonResponse</token>
      </line>
      <line no="14">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">response</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">200</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonResponse</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$successCodes</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">200</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">201</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">202</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">203</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">204</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">205</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">206</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">207</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">208</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">226</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">response</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">json</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'apiResponse.defaultMessage'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'success'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$successCodes</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="21">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'result'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
      </line>
      <line no="22">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="24"/>
      <line no="25">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     * @param  string  $message</token>
      </line>
      <line no="27">
        <token name="T_DOC_COMMENT">     * @param  array  $errors</token>
      </line>
      <line no="28">
        <token name="T_DOC_COMMENT">     * @param  int  $statusCode</token>
      </line>
      <line no="29">
        <token name="T_DOC_COMMENT">     * @return \Illuminate\Http\JsonResponse</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">""</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">500</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JsonResponse</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">response</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">json</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'message'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'apiResponse.exceptionMessageError'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'success'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'errors'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$statusCode</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="39">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="40"/>
    </source>
  </file>
</phpunit>
