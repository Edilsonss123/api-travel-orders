<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="TravelOrderService.php" path="/Services/Travel">
    <totals>
      <lines total="77" comments="0" code="77" executable="27" executed="27" percent="100.00"/>
      <methods count="7" tested="7" percent="100.00"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="1" percent="100.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="App\Services\Travel\TravelOrderService" start="13" executable="27" executed="27" crap="14">
      <namespace name="App\Services\Travel"/>
      <method name="__construct" signature="__construct(App\Repositories\Travel\ITravelOrderRepository $travelOrderRepository)" start="17" end="20" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="getAll" signature="getAll(array $filters, int $perPage): Illuminate\Contracts\Pagination\LengthAwarePaginator" start="22" end="27" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="validatePerPage" signature="validatePerPage(int $perPage): int" start="28" end="37" crap="3" executable="5" executed="5" coverage="100"/>
      <method name="findById" signature="findById(int $id): Illuminate\Database\Eloquent\Model" start="39" end="46" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="create" signature="create(App\ValueObject\Travel\TravelOrderCreateVO $travelOrderCreateVO): Illuminate\Database\Eloquent\Model" start="48" end="52" crap="1" executable="2" executed="2" coverage="100"/>
      <method name="updateStatus" signature="updateStatus(int $id, App\ValueObject\Travel\OrderStatusVO $status): Illuminate\Database\Eloquent\Model" start="54" end="62" crap="1" executable="6" executed="6" coverage="100"/>
      <method name="validateChangeStatus" signature="validateChangeStatus($currentStatus, App\ValueObject\Travel\OrderStatusVO $newStatus): void" start="64" end="75" crap="5" executable="6" executed="6" coverage="100"/>
    </class>
    <coverage>
      <line nr="19">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceCreateTest::testCreateReturnsOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceCreateTest::testCreateOrderStatusCanceledReturnException"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage = 0 deve ser alterado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage negativo deve ser ajustado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdReturnsOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdThrowsTravelExceptionWhenOrderNotFound"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithPastReturnDate"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithoutAuthentication"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithTravelException"/>
        <covered by="Tests\Feature\Travel\TravelOrderStatusTest::testShowTravelStatusOrderWithGenericException"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusValidationError"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusWithoutAuthentication"/>
      </line>
      <line nr="24">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage = 0 deve ser alterado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage negativo deve ser ajustado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
      </line>
      <line nr="25">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage = 0 deve ser alterado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage negativo deve ser ajustado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
      </line>
      <line nr="26">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage = 0 deve ser alterado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage negativo deve ser ajustado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
      </line>
      <line nr="30">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage = 0 deve ser alterado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage negativo deve ser ajustado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
      </line>
      <line nr="31">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage = 0 deve ser alterado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage negativo deve ser ajustado para LIMITE_POR_PAGINA&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testStructureResponseTravelOrders"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersWithSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetAllTravelOrdersFilterStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders empty&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page -7 current page -3&quot;"/>
      </line>
      <line nr="33">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
      </line>
      <line nr="34">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage maior que LIMITE_POR_PAGINA deve ser ajustado&quot;"/>
      </line>
      <line nr="36">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsOrders"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage dentro do limite deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllAppliesLimitCorrectly with data set &quot;perPage igual ao LIMITE_POR_PAGINA deve manter o valor&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testGetAllReturnsEmptyWhenNoOrdersFoundForStatus"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testPaginateTravelOrders with data set &quot;list travel orders multiple itens, per_page 50 current page 2&quot;"/>
      </line>
      <line nr="41">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdReturnsOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdThrowsTravelExceptionWhenOrderNotFound"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="42">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdReturnsOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdThrowsTravelExceptionWhenOrderNotFound"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="43">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdThrowsTravelExceptionWhenOrderNotFound"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderByIdEntityNotFound"/>
      </line>
      <line nr="45">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceRetrieveTest::testFindByIdReturnsOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderRetrieveTest::testGetTravelOrderById"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="50">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceCreateTest::testCreateReturnsOrder"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
      </line>
      <line nr="51">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceCreateTest::testCreateReturnsOrder"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderSuccess"/>
        <covered by="Tests\Feature\Travel\TravelOrderCreateTest::testCreateTravelOrderWithDifferentValidStatus"/>
      </line>
      <line nr="56">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="57">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="58">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="59">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="61">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="66">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="67">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsSame"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;already_same&quot;"/>
      </line>
      <line nr="69">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="70">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_to_requested&quot;"/>
      </line>
      <line nr="72">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
      <line nr="73">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_canceled_to_approved&quot;"/>
      </line>
      <line nr="60">
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusReturnsUpdatedOrder"/>
        <covered by="Tests\Unit\Services\Travel\TravelOrderServiceUpdateTest::testUpdateStatusThrowsExceptionWhenStatusIsUnchanged with data set &quot;change_from_requested_to_approved&quot;"/>
        <covered by="Tests\Feature\Travel\TravelOrderUpdateStatusTest::testUpdateTravelOrderStatusSuccess"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Services\Travel</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Exceptions\TravelException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\Repositories\Travel\ITravelOrderRepository</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\ValueObject\Travel\TravelOrderCreateVO</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Contracts\Pagination\LengthAwarePaginator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Collection</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Illuminate\Database\Eloquent\Model</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">App\ValueObject\Travel\OrderStatusVO</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12"/>
      <line no="13">
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TravelOrderService</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IMPLEMENTS">implements</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ITravelOrderService</token>
      </line>
      <line no="14">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="15">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LIMITE_POR_PAGINA</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">100</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ITravelOrderRepository</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$travelOrderRepository</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">ITravelOrderRepository</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$travelOrderRepository</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="18">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="19">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelOrderRepository</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$travelOrderRepository</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="21"/>
      <line no="22">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getAll</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$filters</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">LengthAwarePaginator</token>
      </line>
      <line no="23">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validatePerPage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$orders</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelOrderRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">getOrders</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$filters</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$orders</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="28">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validatePerPage</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="30">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="31">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LIMITE_POR_PAGINA</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LIMITE_POR_PAGINA</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">LIMITE_POR_PAGINA</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$perPage</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="38"/>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">findById</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Model</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelOrderRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findOrderById</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TravelException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Entity not found"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">404</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="47"/>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">create</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">TravelOrderCreateVO</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$travelOrderCreateVO</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Model</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelOrderRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">createOrder</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$travelOrderCreateVO</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">toArray</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="53"/>
      <line no="54">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">updateStatus</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">OrderStatusVO</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Model</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$orderModel</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">findById</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$id</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateChangeStatus</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$orderModel</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelOrderRepository</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">updateOrder</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$orderModel</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">id</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"status"</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$status</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$order</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="62">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="63"/>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateChangeStatus</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentStatus</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">OrderStatusVO</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newStatus</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$currentStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">status</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="67">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TravelException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"The status has already been "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">status</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$newStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">OrderStatusVO</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">Requested</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TravelException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Unable to change status from "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">status</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" to requested"</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">status</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">OrderStatusVO</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">Canceled</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$newStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_EQUAL">==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">OrderStatusVO</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">Approved</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">TravelException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">"Unable to change status from "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">travelStatus</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">status</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">" to "</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">OrderStatusVO</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">Approved</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">name</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">400</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="77"/>
    </source>
  </file>
</phpunit>
